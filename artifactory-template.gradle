publishing {
    publications {
        snapshot(MavenPublication) {
            from components.java
            groupId = "${group}"
            version = getSnapshotVersion()
        }
        release(MavenPublication) {
            from components.java
            groupId = "${group}"
            version = getReleaseVersion()
        }
    }
}

artifactoryPublish {
    contextUrl = "${artifactoryContextURL}"
    publications("${buildType}")
    
    clientConfig.publisher.username = "${artifactoryUser}"
    clientConfig.publisher.password = "${artifactoryPassword}"
    
    switch("${buildType}") {
    case 'release':        
        clientConfig.publisher.repoKey = artifactoryReleaseRepo        
        break;
    case 'snapshot':
        clientConfig.publisher.repoKey = artifactorySnapshotRepo
        break;
    default:
        throw new RuntimeException("Invalid buildType: ${buildType}")        
    }
}

task incrementMajor << {
    def versionPropsFile = file('version.properties')
    
    if(versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        
        versionProps.load(new FileInputStream(versionPropsFile))
        
        def major = versionProps['major'].toInteger() + 1
        def minor = versionProps['minor']
        def revision = versionProps['revision']
        
        versionProps['major'] = major.toString()
        versionProps.store(versionPropsFile.newWriter(), null) 
        
        println "Version is now: " + major + "." + minor + "r" + revision
    } else {
        throw new RuntimeException("Could not read version.properties!")
    }
}

task incrementMinor << {
    def versionPropsFile = file('version.properties')
    
    if(versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        
        versionProps.load(new FileInputStream(versionPropsFile))
        
        def major = versionProps['major']
        def minor = versionProps['minor'].toInteger() + 1
        def revision = versionProps['revision']
        
        versionProps['major'] = major.toString()
        versionProps.store(versionPropsFile.newWriter(), null) 
        
        println "Version is now: " + major + "." + minor + "r" + revision
    } else {
        throw new RuntimeException("Could not read version.properties!")
    }
}

def getReleaseVersion() {
    def versionPropsFile = file('version.properties')
    
    if(versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        
        versionProps.load(new FileInputStream(versionPropsFile))
        
        def major = versionProps['major']
        def minor = versionProps['minor']
        def revision = versionProps['revision'].toInteger()
        
        if(buildType.equalsIgnoreCase('release')) {
            revision = revision + 1
            versionProps['revision'] = "" + revision
            versionProps.store(versionPropsFile.newWriter(), null) 
        }                                        
        
        return major + "." + minor + "r" + revision        
    } else {
        throw new RuntimeException("Could not read version.properties!")
    }
}

def getSnapshotVersion() {    
    return new Date().format('yy-MM') + "-SNAPSHOT"
}